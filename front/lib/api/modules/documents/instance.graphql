#import './fragments.graphql'

query getInstances($nodeId: ID!, $algorithmId: ID) {
  getInstances(nodeId: $nodeId, algorithmId: $algorithmId) {
    id
    diagramName
    instanceableType
    instanceableId
    diagnosisId
  }
}

mutation createInstance(
  $nodeId: ID!
  $instanceableId: ID!
  $instanceableType: DiagramEnum!
  $positionX: Float
  $positionY: Float
) {
  createInstance(
    input: {
      params: {
        nodeId: $nodeId
        instanceableId: $instanceableId
        instanceableType: $instanceableType
        positionX: $positionX
        positionY: $positionY
      }
    }
  ) {
    instance {
      id
    }
  }
}

query getComponents($instanceableId: ID!, $instanceableType: DiagramEnum!) {
  getComponents(
    instanceableId: $instanceableId
    instanceableType: $instanceableType
  ) {
    id
    positionX
    positionY
    conditions {
      id
      answer {
        id
        nodeId
      }
      cutOffStart
      cutOffEnd
      score
    }
    node {
      id
      fullReference
      labelTranslations {
        ...HstoreLanguages
      }
      excludingNodes {
        id
      }
      category
      isNeonat
      diagramAnswers {
        id
        labelTranslations {
          ...HstoreLanguages
        }
      }
    }
  }
}

query getAvailableNodes(
  $instanceableId: ID!
  $instanceableType: DiagramEnum!
  $after: String
  $before: String
  $first: Int
  $last: Int
  $searchTerm: String
  $filters: NodeFilterInput
) {
  getAvailableNodes(
    instanceableId: $instanceableId
    instanceableType: $instanceableType
    after: $after
    before: $before
    first: $first
    last: $last
    searchTerm: $searchTerm
    filters: $filters
  ) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      endCursor
      startCursor
    }
    totalCount
    edges {
      node {
        id
        fullReference
        labelTranslations {
          ...HstoreLanguages
        }
        excludingNodes {
          id
        }
        category
        isNeonat
        diagramAnswers {
          id
          labelTranslations {
            ...HstoreLanguages
          }
        }
      }
    }
  }
}

mutation updateInstance($id: ID!, $positionX: Float, $positionY: Float) {
  updateInstance(
    input: { params: { id: $id, positionX: $positionX, positionY: $positionY } }
  ) {
    instance {
      id
    }
  }
}

mutation destroyInstance($id: ID!) {
  destroyInstance(input: { id: $id }) {
    id
  }
}
