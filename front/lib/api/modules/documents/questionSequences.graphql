#import './fragments.graphql'

query getQuestionsSequences(
  $projectId: ID!
  $after: String
  $before: String
  $first: Int
  $last: Int
  $searchTerm: String
) {
  getQuestionsSequences(
    projectId: $projectId
    after: $after
    before: $before
    first: $first
    last: $last
    searchTerm: $searchTerm
  ) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      endCursor
      startCursor
    }
    totalCount
    edges {
      node {
        id
        fullReference
        hasInstances
        nodeComplaintCategories {
          complaintCategory {
            labelTranslations {
              ...HstoreLanguages
            }
          }
        }
        labelTranslations {
          ...HstoreLanguages
        }
        type
      }
    }
  }
}

mutation createQuestionsSequence(
  $projectId: ID!
  $labelTranslations: HstoreInput!
  $descriptionTranslations: HstoreInput!
  $type: QuestionsSequenceCategoryEnum!
  $complaintCategoryIds: [ID!]
  $cutOffStart: Int
  $cutOffEnd: Int
  $minScore: Int
) {
  createQuestionsSequence(
    input: {
      params: {
        projectId: $projectId
        labelTranslations: $labelTranslations
        descriptionTranslations: $descriptionTranslations
        type: $type
        complaintCategoryIds: $complaintCategoryIds
        cutOffStart: $cutOffStart
        cutOffEnd: $cutOffEnd
        minScore: $minScore
      }
    }
  ) {
    questionsSequence {
      id
    }
  }
}
