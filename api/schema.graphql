"""
Autogenerated input type of AcceptInvitation
"""
input AcceptInvitationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  params: UserInput!
}

"""
Autogenerated return type of AcceptInvitation.
"""
type AcceptInvitationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdAt: ISO8601DateTime
  id: ID!
  updatedAt: ISO8601DateTime
  user: User
}

type AdministrationRoute {
  category: String!
  createdAt: ISO8601DateTime
  id: ID!
  nameTranslations: Hstore!
  updatedAt: ISO8601DateTime
}

type Algorithm {
  ageLimit: Int!
  ageLimitMessageTranslations: Hstore!
  createdAt: ISO8601DateTime
  decisionTrees: [DecisionTree!]!
  descriptionTranslations: Hstore!
  formattedConsultationOrder: JSON
  fullOrderJson: JSON
  id: ID!
  jobId: String
  languages: [Language!]!
  medalDataConfigVariables: [MedalDataConfigVariable!]!
  medalRJson: JSON
  medalRJsonVersion: Int
  minimumAge: Int!
  mode: String
  name: String!
  status: String!
  updatedAt: ISO8601DateTime
  usedVariables: [Int!]!
}

"""
The connection type for Algorithm.
"""
type AlgorithmConnection {
  createdAt: ISO8601DateTime

  """
  A list of edges.
  """
  edges: [AlgorithmEdge!]!
  id: ID!

  """
  A list of nodes.
  """
  nodes: [Algorithm!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
  updatedAt: ISO8601DateTime
}

"""
An edge in a connection.
"""
type AlgorithmEdge {
  createdAt: ISO8601DateTime

  """
  A cursor for use in pagination.
  """
  cursor: String!
  id: ID!

  """
  The item at the end of the edge.
  """
  node: Algorithm!
  updatedAt: ISO8601DateTime
}

input AlgorithmInput {
  ageLimit: Int
  ageLimitMessageTranslations: HstoreInput
  descriptionTranslations: HstoreInput
  fullOrderJson: JSON
  id: ID
  languageIds: [ID!]
  minimumAge: Int
  mode: String
  name: String
  projectId: ID
  status: String
}

type Answer {
  createdAt: ISO8601DateTime
  id: ID!
  isUnavailable: Boolean!
  labelTranslations: Hstore!
  operator: OperatorEnum
  reference: Int!
  updatedAt: ISO8601DateTime
  value: String!
}

input AnswerInput {
  id: ID
  labelTranslations: HstoreInput!
  operator: OperatorEnum
  value: String
}

type AnswerType {
  createdAt: ISO8601DateTime
  display: String!
  id: ID!
  labelKey: String
  updatedAt: ISO8601DateTime
  value: String!
}

enum BreakableEnum {
  four
  one
  two
}

type Condition {
  answer: Answer!
  createdAt: ISO8601DateTime
  cutOffEnd: Int
  cutOffStart: Int
  id: ID!
  instance: Instance!
  score: Int
  updatedAt: ISO8601DateTime
}

"""
Autogenerated input type of CreateAlgorithm
"""
input CreateAlgorithmInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  params: AlgorithmInput!
}

"""
Autogenerated return type of CreateAlgorithm.
"""
type CreateAlgorithmPayload {
  algorithm: Algorithm

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdAt: ISO8601DateTime
  id: ID!
  updatedAt: ISO8601DateTime
}

"""
Autogenerated input type of CreateDecisionTree
"""
input CreateDecisionTreeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  params: DecisionTreeInput!
}

"""
Autogenerated return type of CreateDecisionTree.
"""
type CreateDecisionTreePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdAt: ISO8601DateTime
  decisionTree: DecisionTree
  id: ID!
  updatedAt: ISO8601DateTime
}

"""
Autogenerated input type of CreateDiagnosis
"""
input CreateDiagnosisInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  files: [Upload!]
  id: ID
  params: DiagnosisInput!
}

"""
Autogenerated return type of CreateDiagnosis.
"""
type CreateDiagnosisPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdAt: ISO8601DateTime
  diagnosis: Diagnosis
  id: ID!
  updatedAt: ISO8601DateTime
}

"""
Autogenerated input type of CreateProject
"""
input CreateProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  params: ProjectInput!
  villages: Upload
}

"""
Autogenerated return type of CreateProject.
"""
type CreateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdAt: ISO8601DateTime
  id: ID!
  project: Project!
  updatedAt: ISO8601DateTime
}

"""
Autogenerated input type of CreateQuestionsSequence
"""
input CreateQuestionsSequenceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  params: QuestionsSequenceInput!
}

"""
Autogenerated return type of CreateQuestionsSequence.
"""
type CreateQuestionsSequencePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdAt: ISO8601DateTime
  id: ID!
  questionsSequence: QuestionsSequence
  updatedAt: ISO8601DateTime
}

"""
Autogenerated input type of CreateUser
"""
input CreateUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  params: UserInput!
}

"""
Autogenerated return type of CreateUser.
"""
type CreateUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdAt: ISO8601DateTime
  id: ID!
  updatedAt: ISO8601DateTime
  user: User
}

"""
Autogenerated input type of CreateVariable
"""
input CreateVariableInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  files: [Upload!]
  id: ID
  params: VariableInput!
}

"""
Autogenerated return type of CreateVariable.
"""
type CreateVariablePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdAt: ISO8601DateTime
  id: ID!
  updatedAt: ISO8601DateTime
  variable: Variable
}

type DecisionTree {
  algorithm: Algorithm!
  components: [Instance!]!
  createdAt: ISO8601DateTime
  cutOffEnd: Int
  cutOffStart: Int
  cutOffValueType: String
  diagnoses: [Diagnosis!]!
  id: ID!
  labelTranslations: Hstore!
  node: Variable!
  reference: Int!
  updatedAt: ISO8601DateTime
}

"""
The connection type for DecisionTree.
"""
type DecisionTreeConnection {
  createdAt: ISO8601DateTime

  """
  A list of edges.
  """
  edges: [DecisionTreeEdge!]!
  id: ID!

  """
  A list of nodes.
  """
  nodes: [DecisionTree!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
  updatedAt: ISO8601DateTime
}

"""
An edge in a connection.
"""
type DecisionTreeEdge {
  createdAt: ISO8601DateTime

  """
  A cursor for use in pagination.
  """
  cursor: String!
  id: ID!

  """
  The item at the end of the edge.
  """
  node: DecisionTree!
  updatedAt: ISO8601DateTime
}

input DecisionTreeInput {
  algorithmId: ID
  cutOffEnd: Int
  cutOffStart: Int
  cutOffValueType: String
  id: ID
  labelTranslations: HstoreInput!
  nodeId: ID!
}

"""
Autogenerated input type of DestroyAlgorithm
"""
input DestroyAlgorithmInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DestroyAlgorithm.
"""
type DestroyAlgorithmPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdAt: ISO8601DateTime
  id: ID
  updatedAt: ISO8601DateTime
}

"""
Autogenerated input type of DestroyDecisionTree
"""
input DestroyDecisionTreeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DestroyDecisionTree.
"""
type DestroyDecisionTreePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdAt: ISO8601DateTime
  id: ID
  updatedAt: ISO8601DateTime
}

"""
Autogenerated input type of DestroyDiagnosis
"""
input DestroyDiagnosisInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DestroyDiagnosis.
"""
type DestroyDiagnosisPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdAt: ISO8601DateTime
  id: ID
  updatedAt: ISO8601DateTime
}

"""
Autogenerated input type of DestroyVariable
"""
input DestroyVariableInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DestroyVariable.
"""
type DestroyVariablePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdAt: ISO8601DateTime
  id: ID
  updatedAt: ISO8601DateTime
}

type Diagnosis {
  components: [Instance!]!
  createdAt: ISO8601DateTime
  descriptionTranslations: Hstore
  files: [File!]!
  hasInstances: Boolean
  id: ID!
  instances: [Instance!]!
  isDangerSign: Boolean!
  isNeonat: Boolean!
  labelTranslations: Hstore!
  levelOfUrgency: Int!
  reference: Int!
  updatedAt: ISO8601DateTime
}

"""
The connection type for Diagnosis.
"""
type DiagnosisConnection {
  createdAt: ISO8601DateTime

  """
  A list of edges.
  """
  edges: [DiagnosisEdge!]!
  id: ID!

  """
  A list of nodes.
  """
  nodes: [Diagnosis!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
  updatedAt: ISO8601DateTime
}

"""
An edge in a connection.
"""
type DiagnosisEdge {
  createdAt: ISO8601DateTime

  """
  A cursor for use in pagination.
  """
  cursor: String!
  id: ID!

  """
  The item at the end of the edge.
  """
  node: Diagnosis!
  updatedAt: ISO8601DateTime
}

input DiagnosisInput {
  decisionTreeId: ID
  descriptionTranslations: HstoreInput
  id: ID
  isDangerSign: Boolean
  isNeonat: Boolean
  labelTranslations: HstoreInput!
  levelOfUrgency: Int
  projectId: ID
}

"""
Autogenerated input type of Disable2fa
"""
input Disable2faInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  params: TwoFaInput!
}

"""
Autogenerated return type of Disable2fa.
"""
type Disable2faPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdAt: ISO8601DateTime
  id: ID
  updatedAt: ISO8601DateTime
}

type Drug {
  createdAt: ISO8601DateTime
  descriptionTranslations: Hstore
  files: [File!]!
  formulations: [Formulation!]!
  hasInstances: Boolean
  id: ID!
  instances: [Instance!]!
  isAntiMalarial: Boolean!
  isAntibiotic: Boolean!
  isDangerSign: Boolean!
  isNeonat: Boolean!
  labelTranslations: Hstore!
  levelOfUrgency: Int
  reference: Int!
  updatedAt: ISO8601DateTime
}

"""
Autogenerated input type of DuplicateDecisionTree
"""
input DuplicateDecisionTreeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DuplicateDecisionTree.
"""
type DuplicateDecisionTreePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdAt: ISO8601DateTime
  id: ID
  updatedAt: ISO8601DateTime
}

"""
Autogenerated input type of DuplicateVariable
"""
input DuplicateVariableInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DuplicateVariable.
"""
type DuplicateVariablePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdAt: ISO8601DateTime
  id: ID
  updatedAt: ISO8601DateTime
}

enum EmergencyStatusEnum {
  emergency
  emergency_if_no
  referral
  standard
}

"""
Autogenerated input type of Enable2fa
"""
input Enable2faInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  params: TwoFaInput!
}

"""
Autogenerated return type of Enable2fa.
"""
type Enable2faPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdAt: ISO8601DateTime
  id: ID!
  updatedAt: ISO8601DateTime
}

type File {
  createdAt: ISO8601DateTime
  extension: String!
  id: ID!
  name: String!
  size: Int!
  updatedAt: ISO8601DateTime
  url: String!
}

type Formulation {
  administrationRoute: AdministrationRoute
  breakable: BreakableEnum
  byAge: Boolean
  createdAt: ISO8601DateTime
  descriptionTranslations: Hstore
  dispensingDescriptionTranslations: Hstore
  doseForm: Float
  dosesPerDay: Int
  id: ID!
  injectionInstructionsTranslations: Hstore
  liquidConcentration: Int
  maximalDose: Float
  maximalDosePerKg: Float
  medicationForm: MedicationFormEnum!
  minimalDosePerKg: Float
  uniqueDose: Float
  updatedAt: ISO8601DateTime
}

type Hstore {
  createdAt: ISO8601DateTime
  en: String!
  fr: String!
  id: ID!
  updatedAt: ISO8601DateTime
}

input HstoreInput {
  en: String
  fr: String
  id: ID
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Instance {
  conditions: [Condition!]!
  createdAt: ISO8601DateTime
  descriptionTranslations: Hstore
  diagnosisId: Int
  diagramName: String
  durationTranslations: Hstore
  id: ID!
  instanceableId: Int!
  instanceableType: String!
  isPreReferral: Boolean
  positionX: Int!
  positionY: Int!
  updatedAt: ISO8601DateTime
}

"""
Represents untyped JSON
"""
scalar JSON

type Language {
  code: String!
  createdAt: ISO8601DateTime
  id: ID!
  name: String!
  updatedAt: ISO8601DateTime
}

"""
Autogenerated input type of LockUser
"""
input LockUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of LockUser.
"""
type LockUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdAt: ISO8601DateTime
  id: ID!
  updatedAt: ISO8601DateTime
  user: User
}

type Management {
  createdAt: ISO8601DateTime
  descriptionTranslations: Hstore
  files: [File!]!
  hasInstances: Boolean
  id: ID!
  instances: [Instance!]!
  isDangerSign: Boolean!
  isNeonat: Boolean!
  labelTranslations: Hstore!
  levelOfUrgency: Int
  reference: Int!
  updatedAt: ISO8601DateTime
}

type MedalDataConfigVariable {
  algorithm: Algorithm!
  apiKey: String!
  createdAt: ISO8601DateTime
  id: ID!
  label: String!
  updatedAt: ISO8601DateTime
  variable: Variable!
}

enum MedicationFormEnum {
  capsule
  cream
  dispersible_tablet
  drops
  gel
  inhaler
  lotion
  ointment
  patch
  pessary
  powder_for_injection
  solution
  spray
  suppository
  suspension
  syrup
  tablet
}

type Mutation {
  acceptInvitation(
    """
    Parameters for AcceptInvitation
    """
    input: AcceptInvitationInput!
  ): AcceptInvitationPayload
  createAlgorithm(
    """
    Parameters for CreateAlgorithm
    """
    input: CreateAlgorithmInput!
  ): CreateAlgorithmPayload
  createDecisionTree(
    """
    Parameters for CreateDecisionTree
    """
    input: CreateDecisionTreeInput!
  ): CreateDecisionTreePayload!
  createDiagnosis(
    """
    Parameters for CreateDiagnosis
    """
    input: CreateDiagnosisInput!
  ): CreateDiagnosisPayload
  createProject(
    """
    Parameters for CreateProject
    """
    input: CreateProjectInput!
  ): CreateProjectPayload!
  createQuestionsSequence(
    """
    Parameters for CreateQuestionsSequence
    """
    input: CreateQuestionsSequenceInput!
  ): CreateQuestionsSequencePayload
  createUser(
    """
    Parameters for CreateUser
    """
    input: CreateUserInput!
  ): CreateUserPayload
  createVariable(
    """
    Parameters for CreateVariable
    """
    input: CreateVariableInput!
  ): CreateVariablePayload
  createdAt: ISO8601DateTime
  destroyAlgorithm(
    """
    Parameters for DestroyAlgorithm
    """
    input: DestroyAlgorithmInput!
  ): DestroyAlgorithmPayload
  destroyDecisionTree(
    """
    Parameters for DestroyDecisionTree
    """
    input: DestroyDecisionTreeInput!
  ): DestroyDecisionTreePayload
  destroyDiagnosis(
    """
    Parameters for DestroyDiagnosis
    """
    input: DestroyDiagnosisInput!
  ): DestroyDiagnosisPayload
  destroyVariable(
    """
    Parameters for DestroyVariable
    """
    input: DestroyVariableInput!
  ): DestroyVariablePayload
  disable2fa(
    """
    Parameters for Disable2fa
    """
    input: Disable2faInput!
  ): Disable2faPayload
  duplicateDecisionTree(
    """
    Parameters for DuplicateDecisionTree
    """
    input: DuplicateDecisionTreeInput!
  ): DuplicateDecisionTreePayload
  duplicateVariable(
    """
    Parameters for DuplicateVariable
    """
    input: DuplicateVariableInput!
  ): DuplicateVariablePayload
  enable2fa(
    """
    Parameters for Enable2fa
    """
    input: Enable2faInput!
  ): Enable2faPayload
  id: ID!
  lockUser(
    """
    Parameters for LockUser
    """
    input: LockUserInput!
  ): LockUserPayload
  unlockUser(
    """
    Parameters for UnlockUser
    """
    input: UnlockUserInput!
  ): UnlockUserPayload
  unsubscribeFromProject(
    """
    Parameters for UnsubscribeFromProject
    """
    input: UnsubscribeFromProjectInput!
  ): UnsubscribeFromProjectPayload
  updateAlgorithm(
    """
    Parameters for UpdateAlgorithm
    """
    input: UpdateAlgorithmInput!
  ): UpdateAlgorithmPayload
  updateDecisionTree(
    """
    Parameters for UpdateDecisionTree
    """
    input: UpdateDecisionTreeInput!
  ): UpdateDecisionTreePayload
  updateDiagnosis(
    """
    Parameters for UpdateDiagnosis
    """
    input: UpdateDiagnosisInput!
  ): UpdateDiagnosisPayload
  updateProject(
    """
    Parameters for UpdateProject
    """
    input: UpdateProjectInput!
  ): UpdateProjectPayload
  updateUser(
    """
    Parameters for UpdateUser
    """
    input: UpdateUserInput!
  ): UpdateUserPayload
  updatedAt: ISO8601DateTime
}

type Node {
  createdAt: ISO8601DateTime
  descriptionTranslations: Hstore
  files: [File!]!
  hasInstances: Boolean
  id: ID!
  instances: [Instance!]!
  isDangerSign: Boolean!
  isNeonat: Boolean!
  labelTranslations: Hstore!
  reference: Int!
  updatedAt: ISO8601DateTime
}

"""
The connection type for Node.
"""
type NodeConnection {
  createdAt: ISO8601DateTime

  """
  A list of edges.
  """
  edges: [NodeEdge!]!
  id: ID!

  """
  A list of nodes.
  """
  nodes: [Node!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
  updatedAt: ISO8601DateTime
}

"""
An edge in a connection.
"""
type NodeEdge {
  createdAt: ISO8601DateTime

  """
  A cursor for use in pagination.
  """
  cursor: String!
  id: ID!

  """
  The item at the end of the edge.
  """
  node: Node!
  updatedAt: ISO8601DateTime
}

enum OperatorEnum {
  between
  less
  more_or_equal
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Project {
  algorithms: [Algorithm!]!
  algorithmsCount: Int
  consentManagement: Boolean!
  createdAt: ISO8601DateTime
  description: String
  drugs: [Drug!]!
  drugsCount: Int
  emergencyContentTranslations: Hstore
  emergencyContentVersion: Int
  id: ID!
  isCurrentUserAdmin: Boolean
  language: Language!
  managements: [Management!]!
  managementsCount: Int
  medalRConfig: JSON
  name: String!
  questionsSequences: [QuestionsSequence!]!
  questionsSequencesCount: Int
  studyDescriptionTranslations: Hstore
  trackReferral: Boolean!
  updatedAt: ISO8601DateTime
  userProjects: [UserProject!]!
  variables: [Variable!]!
  variablesCount: Int
  villageJson: JSON
}

"""
The connection type for Project.
"""
type ProjectConnection {
  createdAt: ISO8601DateTime

  """
  A list of edges.
  """
  edges: [ProjectEdge!]!
  id: ID!

  """
  A list of nodes.
  """
  nodes: [Project!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
  updatedAt: ISO8601DateTime
}

"""
An edge in a connection.
"""
type ProjectEdge {
  createdAt: ISO8601DateTime

  """
  A cursor for use in pagination.
  """
  cursor: String!
  id: ID!

  """
  The item at the end of the edge.
  """
  node: Project!
  updatedAt: ISO8601DateTime
}

input ProjectInput {
  consentManagement: Boolean
  description: String
  emergencyContentTranslations: HstoreInput
  emergencyContentVersion: Int
  id: ID
  languageId: ID!
  name: String!
  studyDescriptionTranslations: HstoreInput
  trackReferral: Boolean
  userProjectsAttributes: [UserProjectInput!]!
}

type Query {
  createdAt: ISO8601DateTime
  getAlgorithm(id: ID!): Algorithm!
  getAlgorithms(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    projectId: ID!
    searchTerm: String
  ): AlgorithmConnection!
  getAnswerTypes: [AnswerType!]!
  getComplaintCategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    projectId: ID!
  ): NodeConnection!
  getDecisionTree(id: ID!): DecisionTree!
  getDecisionTrees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    algorithmId: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    searchTerm: String
  ): DecisionTreeConnection!
  getDiagnoses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    algorithmId: ID!

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    decisionTreeId: ID

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    searchTerm: String
  ): DiagnosisConnection!
  getDiagnosis(id: ID!): Diagnosis!
  getInstances(algorithmId: ID, nodeId: ID!): [Instance!]!
  getLanguages: [Language!]!
  getLastUpdatedDecisionTrees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    projectId: ID!
  ): DecisionTreeConnection!
  getOtpRequiredForLogin(userId: ID!): User!
  getProject(id: ID!): Project!
  getProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    searchTerm: String
  ): ProjectConnection!
  getQrCodeUri(userId: ID!): User!
  getUser(id: ID!): User!
  getUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    projectId: ID
    searchTerm: String
  ): UserConnection!
  getVariable(id: ID!): Variable!
  getVariables(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    projectId: ID!
    searchTerm: String
  ): VariableConnection!
  id: ID!
  updatedAt: ISO8601DateTime
}

type QuestionsSequence {
  answers: [Answer!]!
  components: [Instance!]!
  createdAt: ISO8601DateTime
  cutOffEnd: Int
  cutOffStart: Int
  descriptionTranslations: Hstore
  files: [File!]!
  hasInstances: Boolean
  id: ID!
  instances: [Instance!]!
  isDangerSign: Boolean!
  isNeonat: Boolean!
  labelTranslations: Hstore!
  minScore: Int
  reference: Int!
  type: String!
  updatedAt: ISO8601DateTime
}

input QuestionsSequenceInput {
  cutOffEnd: Int
  cutOffStart: Int
  descriptionTranslations: HstoreInput
  id: ID
  isDangerSign: Boolean
  isNeonat: Boolean
  labelTranslations: HstoreInput!
  minScore: Int
  projectId: ID
  type: String!
}

enum RoleEnum {
  admin
  clinician
  deployment_manager
}

enum RoundEnum {
  half
  tenth
  unit
}

enum SystemEnum {
  chronic_conditions
  comorbidities
  complementary_medical_history
  dehydration
  digestive
  ear_nose_mouth_throat
  exposures
  feeding
  fever
  follow_up_questions
  general
  integumentary
  malnutrition_anemia
  muscular_skeletal
  nervous
  prevention
  priority_sign
  respiratory_circulation
  urinary_reproductive
  visual
  vital_sign
}

input TwoFaInput {
  code: String
  id: ID
  password: String
  userId: ID
}

"""
Autogenerated input type of UnlockUser
"""
input UnlockUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of UnlockUser.
"""
type UnlockUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdAt: ISO8601DateTime
  id: ID!
  updatedAt: ISO8601DateTime
  user: User
}

"""
Autogenerated input type of UnsubscribeFromProject
"""
input UnsubscribeFromProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of UnsubscribeFromProject.
"""
type UnsubscribeFromProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdAt: ISO8601DateTime
  id: ID!
  project: Project
  updatedAt: ISO8601DateTime
}

"""
Autogenerated input type of UpdateAlgorithm
"""
input UpdateAlgorithmInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  params: AlgorithmInput!
}

"""
Autogenerated return type of UpdateAlgorithm.
"""
type UpdateAlgorithmPayload {
  algorithm: Algorithm

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdAt: ISO8601DateTime
  id: ID!
  updatedAt: ISO8601DateTime
}

"""
Autogenerated input type of UpdateDecisionTree
"""
input UpdateDecisionTreeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  params: DecisionTreeInput!
}

"""
Autogenerated return type of UpdateDecisionTree.
"""
type UpdateDecisionTreePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdAt: ISO8601DateTime
  decisionTree: DecisionTree
  id: ID!
  updatedAt: ISO8601DateTime
}

"""
Autogenerated input type of UpdateDiagnosis
"""
input UpdateDiagnosisInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  existingFilesToRemove: [Int!]
  filesToAdd: [Upload!]
  id: ID
  params: DiagnosisInput!
}

"""
Autogenerated return type of UpdateDiagnosis.
"""
type UpdateDiagnosisPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdAt: ISO8601DateTime
  diagnosis: Diagnosis
  id: ID!
  updatedAt: ISO8601DateTime
}

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  params: ProjectInput!
  villages: Upload
}

"""
Autogenerated return type of UpdateProject.
"""
type UpdateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdAt: ISO8601DateTime
  id: ID!
  project: Project
  updatedAt: ISO8601DateTime
}

"""
Autogenerated input type of UpdateUser
"""
input UpdateUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
  params: UserInput!
}

"""
Autogenerated return type of UpdateUser.
"""
type UpdateUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdAt: ISO8601DateTime
  id: ID!
  updatedAt: ISO8601DateTime
  user: User
}

scalar Upload

type User {
  createdAt: ISO8601DateTime
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  lockedAt: String
  otpProvisioningUri: String
  otpRequiredForLogin: Boolean
  otpSecret: String
  password: String
  passwordConfirmation: String
  role: RoleEnum!
  updatedAt: ISO8601DateTime
  userProjects: [UserProject!]!
}

"""
The connection type for User.
"""
type UserConnection {
  createdAt: ISO8601DateTime

  """
  A list of edges.
  """
  edges: [UserEdge!]!
  id: ID!

  """
  A list of nodes.
  """
  nodes: [User!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
  updatedAt: ISO8601DateTime
}

"""
An edge in a connection.
"""
type UserEdge {
  createdAt: ISO8601DateTime

  """
  A cursor for use in pagination.
  """
  cursor: String!
  id: ID!

  """
  The item at the end of the edge.
  """
  node: User!
  updatedAt: ISO8601DateTime
}

input UserInput {
  email: String
  firstName: String
  id: ID
  invitationToken: String
  lastName: String
  password: String
  passwordConfirmation: String
  role: RoleEnum
  userProjectsAttributes: [UserProjectInput!]
}

type UserProject {
  createdAt: ISO8601DateTime
  id: ID!
  isAdmin: Boolean!
  project: Project
  projectId: ID!
  updatedAt: ISO8601DateTime
  userId: ID!
}

input UserProjectInput {
  _destroy: Boolean
  id: ID
  isAdmin: Boolean
  projectId: ID
  userId: ID
}

type Variable {
  answerType: AnswerType!
  answers: [Answer!]!
  createdAt: ISO8601DateTime
  dependenciesByAlgorithm: JSON
  descriptionTranslations: Hstore
  emergencyStatus: EmergencyStatusEnum
  files: [File!]!
  formula: String
  hasInstances: Boolean
  id: ID!
  instances: [Instance!]!
  isDangerSign: Boolean!
  isDefault: Boolean!
  isEstimable: Boolean!
  isIdentifiable: Boolean!
  isMandatory: Boolean!
  isNeonat: Boolean!
  isPreFill: Boolean!
  isReferral: Boolean!
  isUnavailable: Boolean!
  labelTranslations: Hstore!
  maxMessageErrorTranslations: Hstore
  maxMessageWarningTranslations: Hstore
  maxValueError: Int
  maxValueWarning: Int
  minMessageErrorTranslations: Hstore
  minMessageWarningTranslations: Hstore
  minValueError: Int
  minValueWarning: Int
  placeholderTranslations: Hstore
  reference: Int!
  referenceTableFemaleName: String
  referenceTableMaleName: String
  round: RoundEnum
  stage: String
  step: String
  system: SystemEnum
  type: VariableCategoryEnum!
  updatedAt: ISO8601DateTime
}

enum VariableCategoryEnum {
  AnswerableBasicMeasurement
  AssessmentTest
  BackgroundCalculation
  BasicDemographic
  BasicMeasurement
  ChronicCondition
  ComplaintCategory
  Demographic
  Exposure
  ObservedPhysicalSign
  PhysicalExam
  Referral
  Symptom
  TreatmentQuestion
  UniqueTriageQuestion
  Vaccine
  VitalSignAnthropometric
}

"""
The connection type for Variable.
"""
type VariableConnection {
  createdAt: ISO8601DateTime

  """
  A list of edges.
  """
  edges: [VariableEdge!]!
  id: ID!

  """
  A list of nodes.
  """
  nodes: [Variable!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
  updatedAt: ISO8601DateTime
}

"""
An edge in a connection.
"""
type VariableEdge {
  createdAt: ISO8601DateTime

  """
  A cursor for use in pagination.
  """
  cursor: String!
  id: ID!

  """
  The item at the end of the edge.
  """
  node: Variable!
  updatedAt: ISO8601DateTime
}

input VariableInput {
  answerTypeId: ID!
  answersAttributes: [AnswerInput!]!
  complaintCategoryIds: [ID!]
  descriptionTranslations: HstoreInput
  emergencyStatus: EmergencyStatusEnum
  formula: String
  id: ID
  isDangerSign: Boolean
  isEstimable: Boolean
  isIdentifiable: Boolean
  isMandatory: Boolean
  isNeonat: Boolean
  isPreFill: Boolean
  isUnavailable: Boolean
  labelTranslations: HstoreInput!
  maxMessageErrorTranslations: HstoreInput
  maxMessageWarningTranslations: HstoreInput
  maxValueError: Int
  maxValueWarning: Int
  minMessageErrorTranslations: HstoreInput
  minMessageWarningTranslations: HstoreInput
  minValueError: Int
  minValueWarning: Int
  placeholderTranslations: HstoreInput
  projectId: ID
  round: RoundEnum
  system: SystemEnum
  type: VariableCategoryEnum!
}
